import React, { useState, useEffect, ChangeEvent } from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Plus, X } from 'lucide-react';

export interface ActivityDetailKeyValuePair {
  id?: string; // Optional for new entries, will be generated by backend
  key: string; // Maps to detail_type in backend
  value: string; // Stored within detail_data as JSONB in backend
  provider_name?: string; // Optional, will default to 'Manual' in backend
  detail_type?: string; // Optional, will default to 'Custom Field' in backend
}

interface ExerciseActivityDetailsEditorProps {
  initialData: ActivityDetailKeyValuePair[];
  onChange: (data: ActivityDetailKeyValuePair[]) => void;
}

const ExerciseActivityDetailsEditor: React.FC<ExerciseActivityDetailsEditorProps> = ({ initialData, onChange }) => {
  const [pairs, setPairs] = useState<ActivityDetailKeyValuePair[]>(initialData);

  useEffect(() => {
    setPairs(initialData);
  }, [initialData]);

  const handleAddPair = () => {
    setPairs([...pairs, { key: '', value: '', detail_type: 'Custom Field', provider_name: 'Manual' }]);
  };

  const handleRemovePair = (index: number) => {
    const newPairs = pairs.filter((_, i) => i !== index);
    setPairs(newPairs);
    onChange(newPairs);
  };

  const handleKeyChange = (index: number, event: ChangeEvent<HTMLInputElement>) => {
    const newKey = event.target.value;
    const newPairs = pairs.map((pair, i) =>
      i === index ? { ...pair, key: newKey, detail_type: newKey } : pair
    );
    setPairs(newPairs);
    onChange(newPairs);
  };

  const handleValueChange = (index: number, event: ChangeEvent<HTMLInputElement>) => {
    const newValue = event.target.value;
    const newPairs = pairs.map((pair, i) =>
      i === index ? { ...pair, value: newValue } : pair
    );
    setPairs(newPairs);
    onChange(newPairs);
  };

  return (
    <div className="space-y-4">
      {pairs.map((pair, index) => (
        <div key={pair.id || index} className="flex items-end space-x-2">
          <div className="flex-1">
            <Label htmlFor={`key-${index}`}>Field Name</Label>
            <Input
              id={`key-${index}`}
              value={pair.key}
              onChange={(e) => handleKeyChange(index, e)}
              placeholder="e.g., 'Weather', 'Mood'"
            />
          </div>
          <div className="flex-1">
            <Label htmlFor={`value-${index}`}>Value</Label>
            <Input
              id={`value-${index}`}
              value={pair.value}
              onChange={(e) => handleValueChange(index, e)}
              placeholder="e.g., 'Sunny', 'Energetic'"
            />
          </div>
          <Button variant="ghost" size="icon" onClick={() => handleRemovePair(index)}>
            <X className="h-4 w-4" />
          </Button>
        </div>
      ))}
      <Button type="button" variant="outline" onClick={handleAddPair}>
        <Plus className="h-4 w-4 mr-2" /> Add Custom Field
      </Button>
    </div>
  );
};

export default ExerciseActivityDetailsEditor;