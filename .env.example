# SparkyFitness Environment Variables
# Copy this file to .env in the root directory and fill in your own values before running 'docker-compose up'.

# --- PostgreSQL Database Settings ---
# These values should match the ones used by your PostgreSQL container.
# For Docker Compose deployments, SPARKY_FITNESS_DB_HOST will be the service name (e.g., 'sparkyfitness-db').
# For local development (running Node.js directly), use 'localhost' or '127.0.0.1' if PostgreSQL is on your host.
SPARKY_FITNESS_DB_NAME=sparkyfitness_db
SPARKY_FITTY_DB_USER=sparky
SPARKY_FITNESS_DB_PASSWORD=password
SPARKY_FITNESS_DB_HOST=localhost
SPARKY_FITNESS_DB_PORT=5432

# --- Backend Server Settings ---
# The hostname or IP address of the backend server.
# For Docker Compose, this is typically the service name (e.g., 'sparkyfitness-server').
# For local development or other deployments, this might be 'localhost' or a specific IP.
SPARKY_FITNESS_SERVER_HOST=sparkyfitness-server
# The external port the server will be exposed on.
SPARKY_FITNESS_SERVER_PORT=3010

# The public URL of your frontend (e.g., https://fitness.example.com). This is crucial for CORS security.
# For local development, use http://localhost:8080. For production, use your domain with https.
SPARKY_FITNESS_FRONTEND_URL=https://fitness.example.com
#http://localhost:8080

# Logging level for the server (e.g., INFO, DEBUG, WARN, ERROR)
SPARKY_FITNESS_LOG_LEVEL=DEBUG

# Node.js environment mode (e.g., development, production, test)
# Set to 'production' for deployment to ensure optimal performance and security.
NODE_ENV=production

# Server timezone. Use a TZ database name (e.g., 'America/New_York', 'Etc/UTC').
# This affects how dates/times are handled by the server if not explicitly managed in code.
TZ=Etc/UTC

# --- Security Settings ---
# A 64-character hex string for data encryption. 
# You can generate a secure key with the following command:
# openssl rand -hex 32
# or 
# node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
SPARKY_FITNESS_API_ENCRYPTION_KEY=your_32_byte_hex_key

# A secret key for signing JSON Web Tokens (JWTs). Make this a long, random, and secure string.
# You can generate a secure key with the following command:
# openssl rand -base64 32
# or 
# node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=your_32_byte_hex_key


# --- Signup Settings ---
# Set to 'true' to disable new user registrations.
#SPARKY_FITNESS_DISABLE_SIGNUP=true


SPARKY_FITNESS_ADMIN_EMAIL=admin@example.com

# --- Email Settings for Password Reset ---
# Configure your SMTP server details for sending emails.
SPARKY_FITNESS_EMAIL_HOST=smtp.example.com
SPARKY_FITNESS_EMAIL_PORT=587
SPARKY_FITNESS_EMAIL_SECURE=false # Use 'true' for 465 (SSL), 'false' for 587 (TLS)
SPARKY_FITNESS_EMAIL_USER=your_email@example.com
SPARKY_FITNESS_EMAIL_PASS=your_email_password
SPARKY_FITNESS_EMAIL_FROM="SparkyFitness Support <support@example.com>"


# --- Login Management Fail-Safe ---
# Set to 'true' to force email/password login to be enabled, overriding any in-app settings.
# This is a fail-safe to prevent being locked out if OIDC is misconfigured.
SPARKY_FITNESS_FORCE_EMAIL_LOGIN=true


GARMIN_MICROSERVICE_URL=http://localhost:8001
GARMIN_SERVICE_PORT=8001