name: Build Android APK

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install npm dependencies
      run: |
        cd SparkyFitnessMobile
        npm install
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-Wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
        
    - name: Make gradlew executable
      run: chmod +x SparkyFitnessMobile/android/gradlew
    
    - name: Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > SparkyFitnessMobile/android/local.properties
        
    - name: Run Gradle to generate codegen (will fail but generates files)
      run: |
        cd SparkyFitnessMobile/android
        ./gradlew :app:assembleDebug || true
        
    - name: Verify codegen was generated
      run: |
        if [ -d "SparkyFitnessMobile/node_modules/@react-native-async-storage/async-storage/android/build/generated/source/codegen/jni/" ]; then
          echo "✅ Codegen directory exists"
          ls -la SparkyFitnessMobile/node_modules/@react-native-async-storage/async-storage/android/build/generated/source/codegen/jni/
        else
          echo "❌ Codegen directory NOT found"
        fi
        
    - name: Build Release APK
      run: |
        cd SparkyFitnessMobile/android
        ./gradlew :app:assembleRelease --stacktrace
        
    - name: Get APK path
      id: apk
      run: |
        APK_PATH=$(find SparkyFitnessMobile/android/app/build/outputs/apk/release -name "*.apk" | head -n 1)
        echo "path=$APK_PATH" >> $GITHUB_OUTPUT
        echo "name=$(basename $APK_PATH)" >> $GITHUB_OUTPUT
        
    - name: Upload APK as artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-release
        path: ${{ steps.apk.outputs.path }}
        retention-days: 30
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.apk.outputs.path }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
